EXPERIMENTAL. PROVISIONAL. NOT READY FOR ACTUAL USE.

FUN AND POSSIBLY MIND-EXPANDING, THOUGH.

There's a little web app in App.hs, in which application state is described as
a pure function over the events. That's nice and all, but the application state
gets recomputed from scratch every time the event stream changes. Ideally, we
would incrementally update applicationState when something is added to the
event stream. The machinery to do this is under development in src/

You may want some dependencies:
  cabal install wai

Also, you need ghcjs (https://github.com/sviperll/ghcjs) checked out in a
sibling directory to this one. You need to build it (by the instructions in
their README), and you need to build js versions of the haskell libraries. To
do that, cd into ghcjs/examples. Edit BuildTest.hs and change:

  , ("base", ["Prelude"])

 to

   , ("base", ["Prelude", "Data.Data"])

Then runghc BuildTest.hs.

To see it go, type "cabal build", then "cd demo" and "make". 

Bweb not working? Check that all the symlinks in waltz/demo/t point to things.
Sometimes, compiling the runtime pieces to javascript results in a non-
incrementalised javascript version of InctimeHtml. To fix it:
  cd demo
  ../dist/build/Incrementaliser/Incrementaliser InctimeHtml
